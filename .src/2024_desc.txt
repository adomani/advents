-- Day 1
The input is a pair of lists of natural numbers out of which a location should be produced.

### Description

#### Part 1

Sort each of the two lists and compute the distances of the corresponding entries in the
sorted lists

#### Part 2

For each entry `l` of the first list, find how many entries of the second list are equal to
`l` and multiply `l` by this number.
Then, add everything up.
-- Day 2
The input is a list of lists of levels -- each level is a natural number.

### Description

#### Part 1

Find all the rows of the input whose entries are either strictly increasing or strictly decreasing and that never
do they increase or decrease by more than 3.


#### Part 2

Same as part 1, except that you are allowed to drop one level from each entry before checking the condition.
-- Day 3
Parsing a string with errors.

### Description

#### Part 1

Scan the input string for substrings of the form `mul(d1,d2)`, where `d1` and `d2` are only allowed to be `1`, `2` or `3` digit numbers.
Accumulate the products of such numbers, ignoring every malformed substring.


#### Part 2

Same as part 1, except that now we should be aware of the fact that interspered in the string there are also some `do()` and `don't()` substring.
We should only count a multiplication if the closest `do()`/`don't()` substring is a `do()`, ignoring the other multiplications.
If you parse the input by lines, remember to persist the `do()`/`don't()` information across lines!
-- Day 4
Look for the word `XMAS` and `X-MAS` in a grid of letters.

### Description

#### Part 1

For part 1, we scan for the word `XMAS` starting anywhere on the grid and continuing in each of the 8 directions:
horizontal, vertical or diagonal and left/right or up/down.

#### Part 2

For part 2, we should find instead an `X` of `MAS`.
This means that we are looking for a rotation of the pattern
```
M M
 A
S S
```
anywhere on the grid.
-- Day 5
Checking whether some pages are correctly sorted.

### Description

The input begins with a list of pairs of natural numbers, in the form `n1|n2`, representing the correct ordering that the pages should have.
It then continues with a list of actual orders of pages, in the form `p₁,p₂,...,pₙ`.

#### Part 1

Add the number of pages that appear in the middle of each *correctly ordered* list of pages.

#### Part 2

Add the number of pages that appear in the middle of each *incorrectly ordered* list of pages.
-- Day 6
The input is a map with locations of obstacles and the location of a guard.

### Description

#### Part 1

The guard moves in a fixed direction, until it reaches an obstacle.
At that point, it rotates by 90⁰ clockwise and continues.
The first question is to determine how many locations on the map the guard occupies, before exiting the map.

#### Part 2

For the second part, we should find all positions on the grid such that placing one further an obstacle in that position, makes the guard enter into a loop.
-- Day 7
Lists of total and possible operands, but missing operations!

### Description

#### Part 1

Each row starts with a "target" value and a list of possible summands.
Inserting `*` and `+` in all possible ways (and *always* associate to the left),
sum the values of the rows that *can* represent a correct operation, with an appropriate
choice of `*` and `+`.

#### Part 2

Similar to part 1, except that there is a third operation that is allowed:
concatenation of natural numbers, written in decimal.
This extra operation maps `12` and `345` to `12345`.
-- Day 8
Find the resonant harmonics in a grid of antenna locations.

### Description

#### Part 1

The input consists of a map with the positions of antennas.
For each pair `(p, q)` of locations of distinct antennas of the same kind,
we determine the location `p + (p - q)` of a resonant antinode.
We count how many such resonant antinodes there are that are contained in the initial grid.

#### Part 2

Similar to part 1, except that instead of just the location `p + (p - q)`, we want to count all
locations `p + n * (p - q)`, for all `n ≠ 0`, again only counting the positions that end up in the
initial grid.
