-- Day 1
The input is a pair of lists of natural numbers out of which a location should be produced.

### Description

#### Part 1

Sort each of the two lists and compute the distances of the corresponding entries in the
sorted lists

#### Part 2

For each entry `l` of the first list, find how many entries of the second list are equal to
`l` and multiply `l` by this number.
Then, add everything up.
-- Day 2
The input is a list of lists of levels -- each level is a natural number.

### Description

#### Part 1

Find all the rows of the input whose entries are either strictly increasing or strictly decreasing and that never
do they increase or decrease by more than 3.


#### Part 2

Same as part 1, except that you are allowed to drop one level from each entry before checking the condition.
-- Day 3
Parsing a string with errors.

### Description

#### Part 1

Scan the input string for substrings of the form `mul(d1,d2)`, where `d1` and `d2` are only allowed to be `1`, `2` or `3` digit numbers.
Accumulate the products of such numbers, ignoring every malformed substring.


#### Part 2

Same as part 1, except that now we should be aware of the fact that interspered in the string there are also some `do()` and `don't()` substring.
We should only count a multiplication if the closest `do()`/`don't()` substring is a `do()`, ignoring the other multiplications.
If you parse the input by lines, remember to persist the `do()`/`don't()` information across lines!
-- Day 4
Look for the word `XMAS` and `X-MAS` in a grid of letters.

### Description

#### Part 1

For part 1, we scan for the word `XMAS` starting anywhere on the grid and continuing in each of the 8 directions:
horizontal, vertical or diagonal and left/right or up/down.

#### Part 2

For part 2, we should find instead an `X` of `MAS`.
This means that we are looking for a rotation of the pattern
```
M M
 A
S S
```
anywhere on the grid.
